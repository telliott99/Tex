ssh-keygen -t rsa -f kf

type A public key
no newlines
split off at space (do by hand)

Python
>>> import utils
>>> data = utils.load_data('kf.pub')
>>> data
'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8u8w9K4aRPglzdPjql2WdfEZc4YXEnWGE27jGFXR..
>>> data = data.split(' ')[1]
>>> data
'AAAAB3NzaC1yc2EAAAADAQABAAABAQC8u8w9K4aRPglzdPjql2WdfEZc4YXEnWGE27jGFXRloUyjZHO..
>>> import base64
>>> s = base64.b64decode(data)
>>> fn = 'out.txt'
>>> FH = open(fn,'wb')
>>> FH.write(s)
>>> FH.close()

$ hexdump -C out.txt
00000000  00 00 00 07 73 73 68 2d  72 73 61 00 00 00 03 01  |....ssh-rsa.....|
00000010  00 01 00 00 01 01 00 bc  bb cc 3d 2b 86 91 3e 09  |..........=+..>.|
00000020  73 74 f8 ea 97 65 9d 7c  46 5c e1 85 c4 9d 61 84  |st...e.|F\....a.|
00000030  db b8 c6 15 74 65 a1 4c  a3 64 73 8c ee 8c e3 f7  |....te.L.ds.....|
00000040  d8 fe ab 24 7d 8b 7d 67  d3 65 1f f5 be 68 e5 3d  |...$}.}g.e...h.=|
00000050  f6 8d 1e 35 45 4b 1e a0  16 9b 0d f3 3b 68 e8 4f  |...5EK......;h.O|
00000060  11 cc f0 e2 2f 96 94 7f  f8 97 82 49 89 ed 0d 62  |..../......I...b|
00000070  5f c4 9f 32 04 49 75 84  b3 b1 20 27 a3 77 78 e6  |_..2.Iu... '.wx.|
00000080  15 0d 32 bc e3 e5 24 7c  87 c9 85 39 a5 6d cc 00  |..2...$|...9.m..|
00000090  7a 53 64 0a 65 e4 53 10  d5 a4 e4 b0 68 37 24 ca  |zSd.e.S.....h7$.|
000000a0  c0 49 57 7f 18 56 8d 1d  41 60 53 7e 12 a1 22 34  |.IW..V..A`S~.."4|
000000b0  c6 4a d4 1d 67 76 2c 11  5e ba c3 55 0a 1b 98 3e  |.J..gv,.^..U...>|
000000c0  7a 8d 9e 48 f4 32 23 47  f6 26 88 90 54 47 7f 15  |z..H.2#G.&..TG..|
000000d0  78 2e 90 8e e0 86 bf ba  b2 cc 5f ef 5b cc b3 ad  |x........._.[...|
000000e0  9e 1e 8f fd 8e fe 1a 25  32 46 24 54 93 13 77 6a  |.......%2F$T..wj|
000000f0  6c f6 3c 91 95 19 45 0e  b6 df 8d 36 75 51 20 3f  |l.<...E....6uQ ?|
00000100  9c 26 9c 6d 6d 54 7b f6  3b ed 59 04 e6 95 31 da  |.&.mmT{.;.Y...1.|
00000110  d4 89 dd 8b 83 19 af                              |.......|
00000117

ssh-rsa again!

00 00 00 03 is a size, 3 bytes
01 00 01 is an integer = 1 * 16**4 + 1 = 65537
00 00 01 01 is a size 257 bytes
that's how many there are starting from 00 bc

how to edit that?
just do it Python, subtract the first 22 bytes

>>> import utils
>>> data = utils.load_data('out.txt')
>>> data = data[22:]
>>> len(data)
257

Something is wrong, shouldn't have null bytes.. (byte 90 is null)

>>> L = list(data)
>>> L.reverse()
>>> import struct
>>> L2 = [struct.unpack('B',c)[0] for c in L]
>>>


>>> b = 256
>>> n = 0
>>> for i,x in enumerate(L2):
...     x *= b**i
...     n += x
... 
>>> n
23825407884424843043892774272494727140841056131220794814073235869436272108144101157612077691145819379711384125049348749982622353971341424430898704565031993673492500669506687490064456159880624384428503925032086220458047154930707004066770953892554182506810815911196746375402001427586057083601454941966045188074107285999846085803402638441146117703270018978788387579949355226217606772873898002788254528915827743196845476491649535268878371285623756780175112110033880412927380469082588942903398396336859260957319034709430204949246937013848524241113356866131114681210346467216309259656503669217877616526326138440550673750447L
>>>

check it with rsa

>>> import rsa
>>> k = utils.load_data('kf')
>>> pk = rsa.PrivateKey.load_pkcs1(k)
>>> pk.n
23825407884424843043892774272494727140841056131220794814073235869436272108144101157612077691145819379711384125049348749982622353971341424430898704565031993673492500669506687490064456159880624384428503925032086220458047154930707004066770953892554182506810815911196746375402001427586057083601454941966045188074107285999846085803402638441146117703270018978788387579949355226217606772873898002788254528915827743196845476491649535268878371285623756780175112110033880412927380469082588942903398396336859260957319034709430204949246937013848524241113356866131114681210346467216309259656503669217877616526326138440550673750447L
>>>

Yes!

