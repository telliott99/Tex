RSA key formats 
www.cryptosys.net/pki/rsakeyformats.html

Public key formats:

PKCS#1 RSAPublicKey* 
(PEM header: BEGIN RSA PUBLIC KEY)

X.509 SubjectPublicKeyInfo** 
(PEM header: BEGIN PUBLIC KEY)
PEM or base64 format

XML <RSAKeyValue>

Private key formats:

PKCS#1 RSAPrivateKey** 
(PEM header: BEGIN RSA PRIVATE KEY)

PKCS#8 PrivateKeyInfo* 
(PEM header: BEGIN PRIVATE KEY)

XML format, also base 64 encoded
<RSAKeyPair>
  <Modulus>rIlr..
  </Modulus>
  <Exponent>..
  <P>..
  <Q>..
  <DP>..
  <DQ>..
  <InverseQ>..
  <D>..
</RSAKeyPair>

===================================

ssh-keygen -t rsa -C "te" -f ./kf

the default filenames are id_rsa and id_rsa.pub
and they are written to ~/.ssh

default size is 2048
to see info about a key do:

$ ssh-keygen -l -f kf
2048 68:49:2d:ea:04:9b:a8:58:60:c8:71:76:df:86:e4:c5  te (RSA)
$ ssh-keygen -l -f kf.pub
2048 68:49:2d:ea:04:9b:a8:58:60:c8:71:76:df:86:e4:c5  te (RSA)

(since the fingerprint can be generated from kf.pub
it is probably just a hash of n or n,e

This method generates two files:

$ hexdump -C kf
00000000  2d 2d 2d 2d 2d 42 45 47  49 4e 20 52 53 41 20 50  |-----BEGIN RSA P|
00000010  52 49 56 41 54 45 20 4b  45 59 2d 2d 2d 2d 2d 0a  |RIVATE KEY-----.|
00000020  4d 49 49 45 70 41 49 42  41 41 4b 43 41 51 45 41  |MIIEpAIBAAKCAQEA|
00000030  77 38 38 4c 45 44 6a 32  75 6e 2b 68 59 52 43 7a  |w88LEDj2un+hYRCz|
..

$ hexdump -C kf.pub
00000000  73 73 68 2d 72 73 61 20  41 41 41 41 42 33 4e 7a  |ssh-rsa AAAAB3Nz|
00000010  61 43 31 79 63 32 45 41  41 41 41 44 41 51 41 42  |aC1yc2EAAAADAQAB|
00000020  41 41 41 42 41 51 44 44  7a 77 73 51 4f 50 61 36  |AAABAQDDzwsQOPa6|

the latter ends with ' te'

both look like base64 encoding
kf is broken into lines of length 64

I believe this format of the public key is called
OpenSSH format

To convert it to other formats use -e

ssh-keygen -e -f kf.pub

According to man the default for -e is 
RFC4716:  (RFC4716/SSH2 public or private key)
alts:
PKCS8 (PEM PKCS8 public key)
PEM (PEM public key)

but it won't take these as values after -e
with no flag:

$ ssh-keygen -e -f kf.pub
---- BEGIN SSH2 PUBLIC KEY ----
Comment: "2048-bit RSA, converted by telliott_admin@Toms-MacBook-Air.l"
AAAAB3NzaC1yc2EAAAADAQABAAABAQDDzwsQOPa6f6FhELPsK1OYv7j18VoElbDXU68eIP
..

According to:
help.globalscape.com/help/eft6/Server_SSH_Key_Formats.htm
this is PEM format, also called the SECSH Public Key File Format.

The conversion we actually used in previous work was:

openssl rsa -in ./kf -pubout 
writing RSA key
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw88LEDj2un+hYRCz7CtT
..

Here we are deriving the public key from the private key

According to man, options include
-inform DER|NET|PEM
-outform DER|NET|PEM

openssl rsa -outform DER -in ./kf -pubout
writing RSA key

$ hexdump -C kf.pub.der
00000000  30 82 01 22 30 0d 06 09  2a 86 48 86 f7 0d 01 01  |0.."0...*.H.....|
00000010  01 05 00 03 82 01 0f 00  30 82 01 0a 02 82 01 01  |........0.......|
00000020  00 c3 cf 0b 10 38 f6 ba  7f a1 61 10 b3 ec 2b 53  |.....8....a...+S|
..

this is binary output

the default looks identical to what I get with -outform PEM
write to files and check with diff:  correct

In summary, if we use

ssh-keygen -t rsa -C "te" -f ./kf

default file paths are ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub
here I used kf and kf.pub

this public key format is Open SSH

$ hexdump -C kf.pub
00000000  73 73 68 2d 72 73 61 20  41 41 41 41 42 33 4e 7a  |ssh-rsa AAAAB3Nz|
00000010  61 43 31 79 63 32 45 41  41 41 41 44 41 51 41 42  |aC1yc2EAAAADAQAB|
00000020  41 41 41 42 41 51 44 44  7a 77 73 51 4f 50 61 36  |AAABAQDDzwsQOPa6|
..

To convert to PEM format

openssl rsa -outform PEM -in ./kf -pubout

or just

openssl rsa -in ./kf -pubout > kf.pub.pem

hexdump -C kf.pub.pem

$ hexdump -C kf.pub.pem
00000000  2d 2d 2d 2d 2d 42 45 47  49 4e 20 50 55 42 4c 49  |-----BEGIN PUBLI|
00000010  43 20 4b 45 59 2d 2d 2d  2d 2d 0a 4d 49 49 42 49  |C KEY-----.MIIBI|
00000020  6a 41 4e 42 67 6b 71 68  6b 69 47 39 77 30 42 41  |jANBgkqhkiG9w0BA|
..

===================================

the Python rsa module will work with keys but does not recognize 
this as PEM

http://stuvel.eu/rsa
http://stuvel.eu/files/python-rsa-doc/reference.html#functions

>>> import rsa
>>> import utils
>>> data = utils.load_data('kf.pub.pem')
>>> pbk = rsa.PublicKey.load_pkcs1(data)
..
ValueError: No PEM start marker "-----BEGIN RSA PUBLIC KEY-----" found

It will, however, load the private key

>>> data = utils.load_data('kf')
>>> pk = rsa.PrivateKey.load_pkcs1(data)
>>> pk.e
65537

Trying the DER format:

>>> data = utils.load_data('kf.pub.der')
>>> pbk = rsa.PublicKey.load_pkcs1_openssl_der(data)
>>> pbk.e
65537

works.  Trying a different function

>>> data = utils.load_data('kf.pub.pem')
>>> pbk = rsa.PublicKey.load_pkcs1_openssl_pem(data)
>>> pbk.e
65537

works.  So that's the secret.  This is a special pem format.

According to the docs

These files can be recognised in that they start with 
BEGIN PUBLIC KEY rather than BEGIN RSA PUBLIC KEY.

>>> data =  pbk.save_pkcs1()
>>> data[:50]
u'-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAw88LEDj'

This is not the same data as we had in kf.pub.pem
openssl's pem format is not the same

>>> fn = 'x.txt'
>>> FH = open(fn,'w')
>>> FH.write(data)
>>> FH.close()
>>> 

$ hexdump -C x.txt
00000000  2d 2d 2d 2d 2d 42 45 47  49 4e 20 52 53 41 20 50  |-----BEGIN RSA P|
00000010  55 42 4c 49 43 20 4b 45  59 2d 2d 2d 2d 2d 0a 4d  |UBLIC KEY-----.M|
00000020  49 49 42 43 67 4b 43 41  51 45 41 77 38 38 4c 45  |IIBCgKCAQEAw88LE|
00000030  44 6a 32 75 6e 2b 68 59  52 43 7a 37 43 74 54 6d  |Dj2un+hYRCz7CtTm|
00000040  4c 2b 34 39 66 46 61 42  4a 57 77 31 31 4f 76 48  |L+49fFaBJWw11OvH|
00000050  69 44 30 4d 39 41 6e 76  74 32 47 53 39 59 62 0a  |iD0M9Anvt2GS9Yb.|
..

$ hexdump -C kf.pub.pem
00000000  2d 2d 2d 2d 2d 42 45 47  49 4e 20 50 55 42 4c 49  |-----BEGIN PUBLI|
00000010  43 20 4b 45 59 2d 2d 2d  2d 2d 0a 4d 49 49 42 49  |C KEY-----.MIIBI|
00000020  6a 41 4e 42 67 6b 71 68  6b 69 47 39 77 30 42 41  |jANBgkqhkiG9w0BA|
00000030  51 45 46 41 41 4f 43 41  51 38 41 4d 49 49 42 43  |QEFAAOCAQ8AMIIBC|
00000040  67 4b 43 41 51 45 41 77  38 38 4c 45 44 6a 32 75  |gKCAQEAw88LEDj2u|
00000050  6e 2b 68 59 52 43 7a 37  43 74 54 0a 6d 4c 2b 34  |n+hYRCz7CtT.mL+4|
00000060  39 66 46 61 42 4a 57 77  31 31 4f 76 48 69 44 30  |9fFaBJWw11OvHiD0|
..

We can also use the private key data to generate a public key

>>> pbk2 = rsa.PublicKey(pk.n,pk.e)

And one can generate keys using rsa

>>> (pubkey, privkey) = rsa.newkeys(2048)
>>> pubkey.e
65537
>>> privkey.d
10854

===================================

Suppose we generate keys with very small parameters
and then dissect what rsa gives us

see keys.py








