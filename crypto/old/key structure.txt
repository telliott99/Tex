Previously we used ssh-keygen to generate key pairs

ssh-keygen -t rsa -C "te" -f ./kf.txt

$ hexdump -C kf.txt.pub
00000000  73 73 68 2d 72 73 61 20  41 41 41 41 42 33 4e 7a  |ssh-rsa AAAAB3Nz|
00000010  61 43 31 79 63 32 45 41  41 41 41 44 41 51 41 42  |aC1yc2EAAAADAQAB|
00000020  41 41 41 42 41 51 44 62  31 36 30 78 6f 74 74 55  |AAABAQDb160xottU|
..

I believe this format is called "OpenSSH public key format".
It is not what we need for openssl.  We need to convert it:

openssl rsa -in kf.txt -pubout > ./kf.pub.pem

$ hexdump -C kf.pub.pem
00000000  2d 2d 2d 2d 2d 42 45 47  49 4e 20 50 55 42 4c 49  |-----BEGIN PUBLI|
00000010  43 20 4b 45 59 2d 2d 2d  2d 2d 0a 4d 49 49 42 49  |C KEY-----.MIIBI|
00000020  6a 41 4e 42 67 6b 71 68  6b 69 47 39 77 30 42 41  |jANBgkqhkiG9w0BA|
..

Notice this does not say BEGIN RSA PUBLIC KEY.

I have two other methods to do this

openssl can generate keys as well:

$ openssl genrsa -out privkey.pem 2048
Generating RSA private key, 2048 bit long modulus
...........+++
.......+++
e is 65537 (0x10001)
$ hexdump -C privkey.pem
00000000  2d 2d 2d 2d 2d 42 45 47  49 4e 20 52 53 41 20 50  |-----BEGIN RSA P|
00000010  52 49 56 41 54 45 20 4b  45 59 2d 2d 2d 2d 2d 0a  |RIVATE KEY-----.|
00000020  4d 49 49 45 6f 77 49 42  41 41 4b 43 41 51 45 41  |MIIEowIBAAKCAQEA|
..

We generate the public key from the private key.

$ openssl rsa -in privkey.pem -outform PEM -pubout -out pubkey.pem
writing RSA key
$ hexdump -C pubkey.pem
00000000  2d 2d 2d 2d 2d 42 45 47  49 4e 20 50 55 42 4c 49  |-----BEGIN PUBLI|
00000010  43 20 4b 45 59 2d 2d 2d  2d 2d 0a 4d 49 49 42 49  |C KEY-----.MIIBI|
00000020  6a 41 4e 42 67 6b 71 68  6b 69 47 39 77 30 42 41  |jANBgkqhkiG9w0BA|
00000030  51 45 46 41 41 4f 43 41  51 38 41 4d 49 49 42 43  |QEFAAOCAQ8AMIIBC|
..

Notice this also does not say BEGIN RSA PUBLIC KEY.

The other method uses the Python rsa module

>>> import rsa
>>> pub_key, priv_key = rsa.newkeys(2048)
>>> data =  pub_key.save_pkcs1()
>>> data[:50]
u'-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAgQl57c7'
>>> fn = 'kf.pub'
>>> FH = open(fn,'w')
>>> FH.write(data)
>>> FH.close()
>>> data = priv_key.save_pkcs1()
>>> fn = 'kf'
>>> FH = open(fn,'w')
>>> FH.write(data)
>>> FH.close()

$ hexdump -C kf.pub
00000000  2d 2d 2d 2d 2d 42 45 47  49 4e 20 52 53 41 20 50  |-----BEGIN RSA P|
00000010  55 42 4c 49 43 20 4b 45  59 2d 2d 2d 2d 2d 0a 4d  |UBLIC KEY-----.M|
00000020  49 49 42 43 67 4b 43 41  51 45 41 67 51 6c 35 37  |IIBCgKCAQEAgQl57|

One advantage of using rsa is we can specify the components, and read them easily
(provided it can recognize the key format).



===========================

Let's start with the ones from ssh-keygen

Anatomy of RSA keys

Start by understanding base64 encoding
en.wikipedia.org/wiki/Base64

we encode a string of bytes 
which may have any value from 00 to ff
into a string of bytes encoding ASCII characters
A-Z + a-z + 0-9 + /

data is triplets of bytes = 3 x 8 = 24 bits 
will be regrouped to 4 units of 6 bits

6 bits converted to an integer
A-Z + a-z + 0-9 + / represent integers 0 to 63

Python

>>> import base64
>>> base64.b64encode('Man')
'TWFu'
>>> base64.b64decode('TWFu')
'Man'

alternate version uses - _ for the last two (URL-safe)

it's a triplet code
like the genetic code you must know where to start
and input must be padded to be a multiple of 3 (with '=')
similarly decoding must be groups of 4 characters

openssl can also encode and decode base 64

$ echo -n "Man" | openssl base64 -e
TWFu

-n suppresses the '\n' added by the shell
or

$ echo -n "Man" > x.txt
$ hexdump x.txt
0000000 4d 61 6e                                    
0000003
$ openssl base64 -in x.txt
TWFu

decode:

$ echo "TWFu" -n | openssl base64 -d
Man$

===========================

Use Python to look at the public key from rsa

fn = 'kf.pub'
import utils
data = utils.load_data(fn)

it has newlines

data = data.strip().split('\n')
k = ''.join(data[1:-1]

import base64
d = base64.b64decode(k)


















===========================

Now, suppose we generate three key pairs
ssh-keygen -t rsa -C "te" -f ./kf1.txt
ssh-keygen -t rsa -C "te" -f ./kf2.txt
ssh-keygen -t rsa -C "te" -f ./kf3.txt
no passphrase

$ hexdump -C kf1.txt.pub
00000000  73 73 68 2d 72 73 61 20  41 41 41 41 42 33 4e 7a  |ssh-rsa AAAAB3Nz|
00000010  61 43 31 79 63 32 45 41  41 41 41 44 41 51 41 42  |aC1yc2EAAAADAQAB|
00000020  41 41 41 42 41 51 43 38  31 56 41 6f 6c 61 76 75  |AAABAQC81VAolavu|
00000030  39 2b 52 44 75 71 6f 4d  4b 63 71 6d 2f 62 4d 5a  |9+RDuqoMKcqm/bMZ|
..
$ hexdump -C kf2.txt.pub
00000000  73 73 68 2d 72 73 61 20  41 41 41 41 42 33 4e 7a  |ssh-rsa AAAAB3Nz|
00000010  61 43 31 79 63 32 45 41  41 41 41 44 41 51 41 42  |aC1yc2EAAAADAQAB|
00000020  41 41 41 42 41 51 43 6d  45 48 48 6a 49 46 64 64  |AAABAQCmEHHjIFdd|
00000030  66 32 5a 64 72 46 48 55  63 30 52 4c 4e 37 32 44  |f2ZdrFHUc0RLN72D|
..
$ hexdump -C kf3.txt.pub
00000000  73 73 68 2d 72 73 61 20  41 41 41 41 42 33 4e 7a  |ssh-rsa AAAAB3Nz|
00000010  61 43 31 79 63 32 45 41  41 41 41 44 41 51 41 42  |aC1yc2EAAAADAQAB|
00000020  41 41 41 42 41 51 43 6f  70 4d 46 6f 34 4c 4c 4f  |AAABAQCopMFo4LLO|
00000030  6b 4a 47 6a 47 71 4f 4d  66 45 48 64 4e 6b 38 45  |kJGjGqOMfEHdNk8E|

I believe this format is called "OpenSSH public key format"
The first 8 bytes are meant to be read directly as ASCII: ssh-rsa

After that we have:
AAAAB3NzaC1yc2EAAAADAQABAAABAQC81VAolavu9+RDuqoMKcqm/bMZ
AAAAB3NzaC1yc2EAAAADAQABAAABAQCmEHHjIFddf2ZdrFHUc0RLN72D
AAAAB3NzaC1yc2EAAAADAQABAAABAQCopMFo4LLOkJGjGqOMfEHdNk8E
                               |
the point of divergence is marked

echo "AAAAB3NzaC1yc2EAAAADAQABAAABAQC81VAolavu" \
| openssl base64 -d -out x.txt

$ hexdump -C x.txt
00000000  00 00 00 07 73 73 68 2d  72 73 61 00 00 00 03 01  |....ssh-rsa.....|
00000010  00 01 00 00 01 01 00 bc  d5 50 28 95 ab ee        |.........P(...|
0000001e

Having decoded the base64, now we just read bytes.  

The first four bytes are 00 00 00 07
an (unsigned) int indicating a block of 7 bytes of data following:  
ssh-rsa
which is of course, just what it says
Then 00 00 00 03
indicating a three byte block of data:
01 00 01
This is 

>>> b = bin(int("010001", 16))
>>> b
'0b10000000000000001'
>>> int(b,2)
65537
>>>

which we recognize as the public key exponent e

At this point I am not quite sure with this one, 
and unfortunately, I trashed the file!

But I dissected a public key here:
telliott99.blogspot.com/2011/08/dissecting-rsa-keys-in-python-2.html


Problem:  convert a binary file to hex without hexdump?

$ echo "hello world" > x.txt
$ xxd -p x.txt
68656c6c6f20776f726c640a
$ xxd x.txt
0000000: 6865 6c6c 6f20 776f 726c 640a            hello world.
$ xxd -g 1 x.txt
0000000: 68 65 6c 6c 6f 20 77 6f 72 6c 64 0a              hello world.

So to get the bytes for the public key do this:

===========================

The problem with using openssl base64 directly is that
the first part of the key file is not valid base64
nor is the last bit

so for example

ssh-keygen -t rsa -C "te" -f ./kf.txt
openssl base64 -d -in ./kf.txt.pub -out x.txt

x.txt is empty

So .. remove the last bit
cat kf.txt.pub | cut -c -380 > kf.txt.pub.mod

And the first 9 bytes

tail +9c kf.txt.pub.mod > kf.txt.pub2.mod


openssl base64 -d -in ./kf.txt.pub2.mod

still isn't working ..


$ hexdump -ve '1/1 " %.2x"' x.txt
 68 65 6c 6c 6f 20 77 6f 72 6c 64 0a$

===========================

The main issue to be solved here is that the above format doesn't work for some things.
In fact, the private key is not the same format:

$ hexdump -C kf1.txt
00000000  2d 2d 2d 2d 2d 42 45 47  49 4e 20 52 53 41 20 50  |-----BEGIN RSA P|
00000010  52 49 56 41 54 45 20 4b  45 59 2d 2d 2d 2d 2d 0a  |RIVATE KEY-----.|
00000020  4d 49 49 45 70 41 49 42  41 41 4b 43 41 51 45 41  |MIIEpAIBAAKCAQEA|

So what we need to do is:

openssl rsa -in kf1.txt -pubout > ./kf1.pub.pem

This takes the private key and extracts the public key info
then generates a PEM format of the public key

PEM is also known as Privacy Enhanced Email
Defined in RFC's 1421 through 1424
how related to pksc?


$ openssl rsa -in kf1.txt -pubout > ./kf1.pub.pem
writing RSA key
$ hexdump -C kf1.pub.pem
00000000  2d 2d 2d 2d 2d 42 45 47  49 4e 20 50 55 42 4c 49  |-----BEGIN PUBLI|
00000010  43 20 4b 45 59 2d 2d 2d  2d 2d 0a 4d 49 49 42 49  |C KEY-----.MIIBI|
00000020  6a 41 4e 42 67 6b 71 68  6b 69 47 39 77 30 42 41  |jANBgkqhkiG9w0BA|
00000030  51 45 46 41 41 4f 43 41  51 38 41 4d 49 49 42 43  |QEFAAOCAQ8AMIIBC|
00000040  67 4b 43 41 51 45 41 76  4e 56 51 4b 4a 57 72 37  |gKCAQEAvNVQKJWr7|

comparing with 

$ hexdump -C kf1.txt.pub
00000000  73 73 68 2d 72 73 61 20  41 41 41 41 42 33 4e 7a  |ssh-rsa AAAAB3Nz|
00000010  61 43 31 79 63 32 45 41  41 41 41 44 41 51 41 42  |aC1yc2EAAAADAQAB|
00000020  41 41 41 42 41 51 43 38  31 56 41 6f 6c 61 76 75  |AAABAQC81VAolavu|
00000030  39 2b 52 44 75 71 6f 4d  4b 63 71 6d 2f 62 4d 5a  |9+RDuqoMKcqm/bMZ|

The Python rsa module works fine with the private key as it is:

>>> import rsa
>>> fn = 'kf1.txt'
>>> FH = open(fn)
>>> data = FH.read()
>>> FH.close()
>>> priv_key = rsa.PrivateKey.load_pkcs1(data)
>>> priv_key.e
65537
>>> k = priv_key
>>> k.n == k.p * k.q
True

but it fails with the public key:

ValueError: No PEM start marker "-----BEGIN RSA PUBLIC KEY-----" found

This is weird, because public keys generated by ssh-keygen or by openssl (below)
neither one has the "RSA" in the public key..



Of course, we can always generate the public key from the private key
>>> pub_key = rsa.PublicKey(priv_key.e, priv_key.n)

Also, I haven't yet figured out how to actually use the rsa module for encryption

c = rsa.encrypt(msg,pub_key)

The above fails because the message isn't padded properly

What does work:

m = 920321254041092
c = pow(m,k.e,k.n)
p = pow(c,k.d,k.n)

>>> m = 920321254041092
>>> c = pow(m,k.e,k.n)
>>> len(str(c))
617
>>> p = pow(c,k.d,k.n)
>>> p
920321254041092L



This version of the public key does work for openssl:

echo "hello world" > p.txt
openssl rsautl -encrypt -in p.txt -out c.txt -pubin -inkey kf1.pub.pem
openssl rsautl -decrypt -in c.txt -inkey kf1.txt

$ openssl rsautl -decrypt -in c.txt -inkey kf1.txt
hello world


To do:
http://cryptography.readthedocs.org/en/latest/installation/

