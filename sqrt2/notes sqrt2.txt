>>> 14**2
189
>>> 15**2
225

>>> 141**2
19881
>>> 142**2
20164

>>> 1414**2
1999396
>>> 1415**2
2002225

>>> 14142**2
199996164
>>> 14143**2
200024449
>>> 141426**2
20001313476
>>> 141425**2
20001030625
>>> 141424**2
20000747776
>>> 141423**2
20000464929
>>> 141422**2
20000182084
>>> 141421**2
19999899241

>>> 1414214**2
2000001237796
>>> 1414213**2
1999998409369

>>> 14142135**2
199999982358225
>>> 14142136**2
200000010642496

>>> 141421355**2
19999999650036025
>>> 141421356**2
19999999932878736
>>> 141421357**2
20000000215721449

>>> 1414213565**2
2000000007430009225
>>> 1414213564**2
2000000004601582096
>>> 1414213564**2
2000000004601582096
>>> 1414213563**2
2000000001773154969
>>> 1414213562**2
1999999998944727844

>>> 14142135624**2
200000000007609869376
>>> 14142135623**2
199999999979325598129


>>> 141421356235**2
19999999999346773375225
>>> 141421356236**2
19999999999629616087696
>>> 141421356237**2
19999999999912458800169
>>> 141421356238**2
20000000000195301512644

>>> 1414213562375**2
2000000000005388015640625
>>> 1414213562374**2
2000000000002559588515876
>>> 1414213562373**2
1999999999999731161391129

>>> 14142135623735**2
200000000000114537495350225
>>> 14142135623734**2
200000000000086253224102756
>>> 14142135623734**2
200000000000086253224102756
>>> 14142135623733**2
200000000000057968952855289
>>> 14142135623732**2
200000000000029684681607824
>>> 14142135623731**2
200000000000001400410360361
>>> 14142135623730**2
199999999999973116139112900

>>> 141421356237305**2
19999999999998725827473663025
>>> 141421356237306**2
19999999999999008670186137636
>>> 141421356237307**2
19999999999999291512898612249
>>> 141421356237309**2
19999999999999857198323561481
>>> 141421356237309**2
19999999999999857198323561481

>>> 1414213562373095**2
1999999999999999861967979879025
>>> 1414213562373096**2
2000000000000002690395104625216

>>> 14142135623730955**2
200000000000000127618154225212025
>>> 14142135623730953**2
200000000000000071049611730288209
>>> 14142135623730951**2
200000000000000014481069235364401
>>> 14142135623730950**2
199999999999999986196797987902500

>>> s = 1.4142135623730950
>>> s**2
1.9999999999999996
>>> 




I would like to find the best rational approximation to the square root of 2 
(or any other function).

--------
Idea 0:  exhaustive search
--------

One way is exhaustive search: approx0.py

> python3 x.py
7 5
1.96
0.040000000000000036
count 36

99 70
2.000204081632653
0.0002040816326531747
count 4851

816 577
1.9999939927131611
6.007286838860537e-06
count 498501

8119 5741
1.9999999696593482
3.034065176876766e-08
count 49985001

It's brain dead (50,000,000 comparisons), but it has a huge advantage:  
it is guaranteed to give the right answer.

I notice an assumption that I had developed is violated:
99 is not in the range 60-80 predicted from 7 in the previous round, etc.

-----
can we assume that an uphill walk from 990,700 will get to 816,577?

--------
Idea 1:  search every n
--------

d = floor(n/sqrt(2))
this is the smallest d that gives (n/d)**2 > 2
so d-1 is the largest d that gives (n/d)**2 < 2
d-1 might be closer so test that too

The top 3 items

(99, 70, 0.0002)
(58, 41, 0.00119)
(75, 53, 0.00249)

(577, 408, 6.007304882871267e-06)
(915, 647, 1.6722048498785114e-05)
(338, 239, 3.501339262257375e-05)

(3363, 2378, 1.768382871247809e-07)
(6726, 4756, 1.768382871247809e-07)
(8696, 6149, 3.702704463037776e-07)

why not 816/577? or 8119/5741?
something weird about the fitness function

in any case, answers at next power not related to answers at previous

--------

The continued fractions give this sequence.  Each time, we test the fit:

1 + 4 = 5/2

2 + 5  = 7/5             -> 1.96, 0.04
2 + 10 = 12/5

5 + 12 = 17/12           -> 2.0069, 0.0069
5 + 24 = 29/12

12 + 29 = 41/29          -> 1.9988, 0.00119
12 + 58 = 70/29

29 + 70 = 99/70          -> 2 e-04
29 + 140 = 169/70

70 + 169 = 239/169       -> 3.5 e-05
70 + 338 = 408/169

169 + 408 = 577/408      -> 6.0 e-06
169 + 816 = 985/408

408 + 985  = 1393/985    -> 1.031 e-06
408 + 1970 = 2378/985

985 + 2378 = 3363/2378   -> 1.77 e-07
985 + 4756 = 5741/2378

2378 + 5741 = 8119/5741  -> 3.03 e-08
2378 + 11482 = 13860/5741

5741 + 13860 = 19601/13860  -> 5.2 e-09

Note:  these are a much better fit than taking the digits of the square root of 2.

fit(141421,100000) -> 1 e-5
577/408 is almost 2x better.





